// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`permissionRenewalData metadata should have expected description 1`] = `"Prepare data for renewing a permission based on the existing data"`;

exports[`permissionRenewalData metadata should have expected notes 1`] = `
"
        Prepare data for renewing a permission based on the existing data
      "
`;

exports[`permissionRenewalData metadata should have expected tags 1`] = `
Array [
  "api",
  "renewals",
]
`;

exports[`permissionRenewalData metadata should have expected validate 1`] = `
Object {
  "params": Object {
    "$_root": Object {
      "ValidationError": [Function],
      "_types": Set {
        "alternatives",
        "any",
        "array",
        "boolean",
        "date",
        "function",
        "link",
        "number",
        "object",
        "string",
        "symbol",
        "binary",
      },
      "allow": [Function],
      "alt": [Function],
      "alternatives": [Function],
      "any": [Function],
      "array": [Function],
      "assert": [Function],
      "attempt": [Function],
      "binary": [Function],
      "bool": [Function],
      "boolean": [Function],
      "build": [Function],
      "cache": Object {
        "provision": [Function],
      },
      "checkPreferences": [Function],
      "compile": [Function],
      "custom": [Function],
      "date": [Function],
      "defaults": [Function],
      "disallow": [Function],
      "equal": [Function],
      "exist": [Function],
      "expression": [Function],
      "extend": [Function],
      "forbidden": [Function],
      "func": [Function],
      "function": [Function],
      "in": [Function],
      "invalid": [Function],
      "isError": [Function],
      "isExpression": [Function],
      "isRef": [Function],
      "isSchema": [Function],
      "link": [Function],
      "not": [Function],
      "number": [Function],
      "object": [Function],
      "only": [Function],
      "optional": [Function],
      "options": [Function],
      "override": Symbol(override),
      "preferences": [Function],
      "prefs": [Function],
      "ref": [Function],
      "required": [Function],
      "string": [Function],
      "strip": [Function],
      "symbol": [Function],
      "trace": [Function],
      "types": [Function],
      "untrace": [Function],
      "valid": [Function],
      "version": "17.6.0",
      "when": [Function],
      "x": [Function],
      Symbol(@hapi/lab/coverage/initialize): [Function],
    },
    "$_super": Object {
      "default": [Function],
    },
    "$_temp": Object {
      "ruleset": false,
      "whens": Object {},
    },
    "$_terms": Object {
      "alterations": null,
      "dependencies": null,
      "examples": null,
      "externals": null,
      "keys":  [
        Object {
          "key": "referenceNumber",
          "schema": Object {
            "$_root": Object {
              "ValidationError": [Function],
              "_types": Set {
                "alternatives",
                "any",
                "array",
                "boolean",
                "date",
                "function",
                "link",
                "number",
                "object",
                "string",
                "symbol",
                "binary",
              },
              "allow": [Function],
              "alt": [Function],
              "alternatives": [Function],
              "any": [Function],
              "array": [Function],
              "assert": [Function],
              "attempt": [Function],
              "binary": [Function],
              "bool": [Function],
              "boolean": [Function],
              "build": [Function],
              "cache": Object {
                "provision": [Function],
              },
              "checkPreferences": [Function],
              "compile": [Function],
              "custom": [Function],
              "date": [Function],
              "defaults": [Function],
              "disallow": [Function],
              "equal": [Function],
              "exist": [Function],
              "expression": [Function],
              "extend": [Function],
              "forbidden": [Function],
              "func": [Function],
              "function": [Function],
              "in": [Function],
              "invalid": [Function],
              "isError": [Function],
              "isExpression": [Function],
              "isRef": [Function],
              "isSchema": [Function],
              "link": [Function],
              "not": [Function],
              "number": [Function],
              "object": [Function],
              "only": [Function],
              "optional": [Function],
              "options": [Function],
              "override": Symbol(override),
              "preferences": [Function],
              "prefs": [Function],
              "ref": [Function],
              "required": [Function],
              "string": [Function],
              "strip": [Function],
              "symbol": [Function],
              "trace": [Function],
              "types": [Function],
              "untrace": [Function],
              "valid": [Function],
              "version": "17.6.0",
              "when": [Function],
              "x": [Function],
              Symbol(@hapi/lab/coverage/initialize): [Function],
            },
            "$_super": Object {},
            "$_temp": Object {
              "ruleset": false,
              "whens": Object {},
            },
            "$_terms": Object {
              "alterations": null,
              "examples": Array [
                "17030621-3WC3FFT-B6HLG9",
              ],
              "externals": null,
              "metas": Array [],
              "notes": Array [],
              "replacements": null,
              "shared": null,
              "tags": Array [],
              "whens": null,
            },
            "_cache": null,
            "_flags": Object {
              "description": "The permission reference number",
              "presence": "required",
            },
            "_ids": Object {
              "_byId": Map {},
              "_byKey": Map {},
              "_schemaChain": false,
            },
            "_invalids": null,
            "_preferences": null,
            "_refs": Object {
              "refs": Array [],
            },
            "_rules": Array [
              Object {
                "_resolve": Array [],
                "args": Object {
                  "enabled": true,
                },
                "method": "trim",
                "name": "trim",
              },
              Object {
                "_resolve": Array [],
                "args": Object {
                  "direction": "upper",
                },
                "method": "case",
                "name": "case",
              },
              Object {
                "_resolve": Array [],
                "args": Object {
                  "options": Object {},
                  "regex": /\\^\\\\d\\{8\\}-\\\\d\\[A-Z\\]\\{2\\}\\\\d\\[A-Z\\]\\{3\\}-\\[A-Z0-9\\]\\{6\\}\\$/,
                },
                "errorCode": "string.pattern.base",
                "method": "pattern",
                "name": "pattern",
              },
            ],
            "_singleRules": Map {
              "trim" => Object {
                "_resolve": Array [],
                "args": Object {
                  "enabled": true,
                },
                "method": "trim",
                "name": "trim",
              },
              "case" => Object {
                "_resolve": Array [],
                "args": Object {
                  "direction": "upper",
                },
                "method": "case",
                "name": "case",
              },
            },
            "_valids": null,
            "type": "string",
          },
        },
      ],
      "metas": Array [],
      "notes": Array [],
      "patterns": null,
      "renames": null,
      "shared": null,
      "tags": Array [],
      "whens": null,
    },
    "_cache": null,
    "_flags": Object {
      "label": "permission-renewal-data-request-params",
    },
    "_ids": Object {
      "_byId": Map {},
      "_byKey": Map {
        "referenceNumber" => Object {
          "id": "referenceNumber",
          "schema": Object {
            "$_root": Object {
              "ValidationError": [Function],
              "_types": Set {
                "alternatives",
                "any",
                "array",
                "boolean",
                "date",
                "function",
                "link",
                "number",
                "object",
                "string",
                "symbol",
                "binary",
              },
              "allow": [Function],
              "alt": [Function],
              "alternatives": [Function],
              "any": [Function],
              "array": [Function],
              "assert": [Function],
              "attempt": [Function],
              "binary": [Function],
              "bool": [Function],
              "boolean": [Function],
              "build": [Function],
              "cache": Object {
                "provision": [Function],
              },
              "checkPreferences": [Function],
              "compile": [Function],
              "custom": [Function],
              "date": [Function],
              "defaults": [Function],
              "disallow": [Function],
              "equal": [Function],
              "exist": [Function],
              "expression": [Function],
              "extend": [Function],
              "forbidden": [Function],
              "func": [Function],
              "function": [Function],
              "in": [Function],
              "invalid": [Function],
              "isError": [Function],
              "isExpression": [Function],
              "isRef": [Function],
              "isSchema": [Function],
              "link": [Function],
              "not": [Function],
              "number": [Function],
              "object": [Function],
              "only": [Function],
              "optional": [Function],
              "options": [Function],
              "override": Symbol(override),
              "preferences": [Function],
              "prefs": [Function],
              "ref": [Function],
              "required": [Function],
              "string": [Function],
              "strip": [Function],
              "symbol": [Function],
              "trace": [Function],
              "types": [Function],
              "untrace": [Function],
              "valid": [Function],
              "version": "17.6.0",
              "when": [Function],
              "x": [Function],
              Symbol(@hapi/lab/coverage/initialize): [Function],
            },
            "$_super": Object {},
            "$_temp": Object {
              "ruleset": false,
              "whens": Object {},
            },
            "$_terms": Object {
              "alterations": null,
              "examples": Array [
                "17030621-3WC3FFT-B6HLG9",
              ],
              "externals": null,
              "metas": Array [],
              "notes": Array [],
              "replacements": null,
              "shared": null,
              "tags": Array [],
              "whens": null,
            },
            "_cache": null,
            "_flags": Object {
              "description": "The permission reference number",
              "presence": "required",
            },
            "_ids": Object {
              "_byId": Map {},
              "_byKey": Map {},
              "_schemaChain": false,
            },
            "_invalids": null,
            "_preferences": null,
            "_refs": Object {
              "refs": Array [],
            },
            "_rules": Array [
              Object {
                "_resolve": Array [],
                "args": Object {
                  "enabled": true,
                },
                "method": "trim",
                "name": "trim",
              },
              Object {
                "_resolve": Array [],
                "args": Object {
                  "direction": "upper",
                },
                "method": "case",
                "name": "case",
              },
              Object {
                "_resolve": Array [],
                "args": Object {
                  "options": Object {},
                  "regex": /\\^\\\\d\\{8\\}-\\\\d\\[A-Z\\]\\{2\\}\\\\d\\[A-Z\\]\\{3\\}-\\[A-Z0-9\\]\\{6\\}\\$/,
                },
                "errorCode": "string.pattern.base",
                "method": "pattern",
                "name": "pattern",
              },
            ],
            "_singleRules": Map {
              "trim" => Object {
                "_resolve": Array [],
                "args": Object {
                  "enabled": true,
                },
                "method": "trim",
                "name": "trim",
              },
              "case" => Object {
                "_resolve": Array [],
                "args": Object {
                  "direction": "upper",
                },
                "method": "case",
                "name": "case",
              },
            },
            "_valids": null,
            "type": "string",
          },
        },
      },
      "_schemaChain": false,
    },
    "_invalids": null,
    "_preferences": null,
    "_refs": Object {
      "refs": Array [],
    },
    "_rules": Array [],
    "_singleRules": Map {},
    "_valids": null,
    "type": "object",
  },
}
`;

exports[`permissionRenewalData should call preparePermissionDataForRenewal with the expected data 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "concessions": Array [
          Object {
            "id": "d0ece997-ef65-e611-80dc-c4346bad4004",
            "name": "Senior",
            "proof": Object {
              "referenceNumber": "AB 01 02 03 CD",
              "type": "National Insurance Number",
            },
          },
        ],
        "dataSource": Object {
          "description": "Web Sales",
          "id": 910400003,
          "label": "Web Sales",
        },
        "endDate": "2020-12-13T23:59:59Z",
        "id": "347a9083-361e-ea11-a810-000d3a25c5d6",
        "issueDate": "2019-12-13T09:00:00Z",
        "licensee": Object {
          "birthDate": "1946-01-01",
          "country": Object {
            "description": "GB-ENG",
            "id": 910400195,
            "label": "England",
          },
          "email": "fester@tester.com",
          "firstName": "Fester",
          "id": "1329a866-d175-ea11-a811-000d3a64905b",
          "lastName": "Tester",
          "locality": "Testville",
          "mobilePhone": "01234 567890",
          "organisation": "Test Organisation",
          "postalFulfilment": true,
          "postcode": "AB12 3CD",
          "preferredMethodOfConfirmation": Object {
            "description": "Email",
            "id": 910400000,
            "label": "Email",
          },
          "premises": "1",
          "street": "Tester Avenue",
          "town": "Tersterton",
        },
        "permit": Object {
          "availableFrom": "2017-03-31T23:00:00Z",
          "availableTo": "2021-03-31T22:59:00Z",
          "cost": 6,
          "description": "Coarse 1 day 2 Rod Licence (Senior)",
          "durationDesignator": Object {
            "description": "D",
            "id": 910400000,
            "label": "Day(s)",
          },
          "durationMagnitude": 1,
          "id": "9f1b34a0-0c66-e611-80dc-c4346bad0190",
          "isCounterSales": true,
          "isForFulfilment": false,
          "isRecurringPaymentSupported": false,
          "itemId": "42290",
          "numberOfRods": 2,
          "permitSubtype": Object {
            "description": "C",
            "id": 910400001,
            "label": "Trout and coarse",
          },
          "permitType": Object {
            "description": "Rod Fishing Licence",
            "id": 910400000,
            "label": "Rod Fishing Licence",
          },
        },
        "referenceNumber": "00000000-2WC3FDR-CD379B",
        "stagingId": "71ad9a25-2a03-406b-a0e3-f4ff37799374",
        "startDate": "2019-12-14T00:00:00Z",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
