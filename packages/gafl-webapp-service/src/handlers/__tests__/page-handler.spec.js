import db from 'debug'
import pageHandler from '../page-handler.js'
import journeyDefinition from '../../routes/journey-definition.js'
import { addLanguageCodeToUri } from '../../processors/uri-helper.js'

jest.mock('debug', () => jest.fn(() => jest.fn()))
jest.mock('../../routes/journey-definition.js', () => [])
jest.mock('../../processors/uri-helper.js')

describe('The page handler function', () => {
  let fakeDebug

  beforeAll(() => {
    fakeDebug = db.mock.results[0].value
  })
  beforeEach(() => {
    jest.resetAllMocks()
    journeyDefinition.length = 0
  })

  it('the get method re-throws any exceptions which are not transaction errors ', async () => {
    const request = getMockRequest()

    const getData = async () => {
      throw new Error('Random exception')
    }

    try {
      await pageHandler(null, null, null, getData).get(request)
    } catch (err) {
      expect(err.message).toBe('Random exception')
    }
  })

  it('the error method re-throws any exceptions which are not transaction errors ', async () => {
    const request = getMockRequest(() => {
      throw new Error('Random exception')
    })
    try {
      await pageHandler().error(request, null, { details: [] })
    } catch (err) {
      expect(err.message).toBe('Random exception')
    }
  })

  it('logs the cache if getCurrentPermission throws an error', async () => {
    const request = {
      cache: () => ({
        helpers: {
          page: {
            getCurrentPermission: () => {
              throw new Error('Random exception')
            },
            get: () => ({})
          },
          status: {
            get: () => ({})
          },
          transaction: {
            get: () => ({})
          }
        }
      })
    }
    await expect(pageHandler().get(request)).rejects.toThrow('Random exception')
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Page cache'))
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Status cache'))
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Transaction cache'))
  })

  it.each([['/previous/page'], ['/last/page']])('get calls addLanguageCodeToUri with request and backLink', async previousPage => {
    const backLink = () => previousPage
    journeyDefinition.push({ current: { page: 'view' }, backLink })
    const { get } = pageHandler(null, 'view', '/next/page')
    const request = getMockRequest(undefined, '/this/page')
    const toolkit = getMockToolkit()

    await get(request, toolkit)

    expect(addLanguageCodeToUri).toHaveBeenCalledWith(request, backLink())
  })

  it.each([[() => '/last/page'], ['previous/page']])(
    'pageData.backRef from get uses value generated by addLanguageCodeToUri',
    async backLink => {
      journeyDefinition.push({ current: { page: 'view' }, backLink })
      const { get } = pageHandler(null, 'view', '/next/page')
      const returnValue = Symbol('/previous/page')
      addLanguageCodeToUri.mockReturnValueOnce(returnValue)
      const toolkit = getMockToolkit()

      await get(getMockRequest(), toolkit)

      expect(toolkit.view).toHaveBeenCalledWith(
        expect.any(String),
        expect.objectContaining({
          backRef: returnValue
        })
      )
    }
  )

  it('pageData.backRef is null if backLink is null', async () => {
    const backLink = () => {}
    journeyDefinition.push({ current: { page: 'view' }, backLink })
    const { get } = pageHandler(null, 'view', '/next/page')
    const returnValue = Symbol('/previous/page')
    addLanguageCodeToUri.mockReturnValueOnce(returnValue)
    const toolkit = getMockToolkit()

    await get(getMockRequest(), toolkit)

    expect(toolkit.view).toHaveBeenCalledWith(
      expect.any(String),
      expect.objectContaining({
        backRef: null
      })
    )
  })

  it('error calls addLanguageCodeToUri with request', async () => {
    const { error } = pageHandler('', 'view')
    const request = getMockRequest()
    await error(request, getMockToolkit(), { details: [] })
    expect(addLanguageCodeToUri).toHaveBeenCalledWith(request)
  })

  it.each([['/route/one'], ['/route/sixty-six']])('error redirects to uri decorated by addLanguageCodeToUri', async url => {
    const { error } = pageHandler('', 'view')
    const toolkit = getMockToolkit()
    addLanguageCodeToUri.mockReturnValueOnce(`Redirect to url ${url}`)
    await error(getMockRequest(undefined, url), toolkit, { details: [] })
    expect(toolkit.redirect).toHaveBeenCalledWith(`Redirect to url ${url}`)
  })
})

const getMockRequest = (setCurrentPermission = () => {}, path = '/we/are/here') => ({
  cache: () => ({
    helpers: {
      page: {
        getCurrentPermission: () => ({}),
        setCurrentPermission
      },
      status: {
        getCurrentPermission: () => ({}),
        setCurrentPermission: () => {}
      },
      transaction: {
        getCurrentPermission: () => {}
      }
    }
  }),
  i18n: {
    getCatalog: () => {},
    getLocales: () => [],
    getLocale: () => ''
  },
  path,
  url: {
    search: ''
  }
})

const getMockToolkit = () => ({
  redirect: jest.fn(() => ({ takeover: () => {} })),
  view: jest.fn()
})
