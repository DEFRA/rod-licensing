import db from 'debug'
import pageHandler from '../page-handler.js'
import journeyDefinition from '../../routes/journey-definition.js'
import { addLanguageCodeToUri } from '../../processors/uri-helper.js'
import GetDataRedirect from '../get-data-redirect.js'
import { ANALYTICS } from '../../constants.js'
import { AGREED, IDENTIFY, LICENCE_DETAILS, LICENCE_FOR, ORDER_COMPLETE, PAYMENT_CANCELLED, PAYMENT_FAILED } from '../../uri.js'

jest.mock('debug', () => jest.fn(() => jest.fn()))
jest.mock('../../routes/journey-definition.js', () => [])
jest.mock('../../processors/uri-helper.js')

jest.mock('../../constants', () => ({
  ANALYTICS: {
    selected: 'selected',
    acceptTracking: 'accepted-tracking',
    seenMessage: 'seen-message'
  },
  PAGE_STATE: { completed: true, error: false }
}))

jest.mock('../../uri.js', () => ({
  AGREED: { uri: '/buy/agreed/page' },
  LICENCE_DETAILS: { uri: '/buy/licence/details' },
  ORDER_COMPLETE: { uri: '/buy/order/complete/page' },
  PAYMENT_CANCELLED: { uri: '/buy/payment/cancelled/page' },
  PAYMENT_FAILED: { uri: '/buy/payment/failed/page' },
  PROCESS_ANALYTICS_PREFERENCES: { uri: '/buy/process/analytics/preferences/page' },
  LICENCE_FOR: { uri: '/buy/licence-for' },
  IDENTIFY: { uri: '/buy/renew/identify' }
}))

describe('The page handler function', () => {
  let fakeDebug

  beforeAll(() => {
    fakeDebug = db.mock.results[0].value
  })
  beforeEach(() => {
    jest.resetAllMocks()
    journeyDefinition.length = 0
  })

  it('the get method re-throws any exceptions which are not transaction errors ', async () => {
    const request = getMockRequest()

    const getData = async () => {
      throw new Error('Random exception')
    }

    try {
      await pageHandler(null, null, null, getData).get(request)
    } catch (err) {
      expect(err.message).toBe('Random exception')
    }
  })

  it('the error method re-throws any exceptions which are not transaction errors ', async () => {
    const request = getMockRequest(() => {
      throw new Error('Random exception')
    })
    try {
      await pageHandler().error(request, null, { details: [] })
    } catch (err) {
      expect(err.message).toBe('Random exception')
    }
  })

  it('logs the cache if getCurrentPermission throws an error', async () => {
    const request = {
      cache: () => ({
        helpers: {
          page: {
            getCurrentPermission: () => {
              throw new Error('Random exception')
            },
            get: () => ({})
          },
          status: {
            get: () => ({})
          },
          transaction: {
            get: () => ({})
          },
          analytics: {
            get: () => ({})
          }
        }
      })
    }
    await expect(pageHandler().get(request)).rejects.toThrow('Random exception')
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Page cache'))
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Status cache'))
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Transaction cache'))
    expect(fakeDebug).toHaveBeenCalledWith(expect.stringContaining('Analytics cache'))
  })

  it.each([['/previous/page'], ['/last/page']])('get calls addLanguageCodeToUri with request and backLink', async previousPage => {
    const backLink = () => previousPage
    journeyDefinition.push({ current: { page: 'view' }, backLink })
    const { get } = pageHandler(null, 'view', '/next/page')
    const request = getMockRequest(undefined, '/this/page')
    const toolkit = getMockToolkit()

    await get(request, toolkit)

    expect(addLanguageCodeToUri).toHaveBeenCalledWith(request, backLink())
  })

  it.each([[() => '/last/page'], ['previous/page']])(
    'pageData.backRef from get uses value generated by addLanguageCodeToUri',
    async backLink => {
      journeyDefinition.push({ current: { page: 'view' }, backLink })
      const { get } = pageHandler(null, 'view', '/next/page')
      const returnValue = Symbol('/previous/page')
      addLanguageCodeToUri.mockReturnValueOnce(returnValue)
      const toolkit = getMockToolkit()

      await get(getMockRequest(), toolkit)

      expect(toolkit.view).toHaveBeenCalledWith(
        expect.any(String),
        expect.objectContaining({
          backRef: returnValue
        })
      )
    }
  )

  it('pageData.backRef is null if backLink is null', async () => {
    const backLink = () => {}
    journeyDefinition.push({ current: { page: 'view' }, backLink })
    const { get } = pageHandler(null, 'view', '/next/page')
    const returnValue = Symbol('/previous/page')
    addLanguageCodeToUri.mockReturnValueOnce(returnValue)
    const toolkit = getMockToolkit()

    await get(getMockRequest(), toolkit)

    expect(toolkit.view).toHaveBeenCalledWith(
      expect.any(String),
      expect.objectContaining({
        backRef: null
      })
    )
  })

  it.each([['/go/somewhere'], ['/go/somewhere/else']])(
    'GetDataRedirect being thrown will pass url to be decorated to addLanguageCodeToUri',
    async redirectUri => {
      journeyDefinition.push({ current: { page: 'view' }, backLink: '/previous/page' })
      const getData = () => {
        throw new GetDataRedirect(redirectUri)
      }
      const { get } = pageHandler(null, 'view', '/next/page', getData)
      const toolkit = getMockToolkit()
      const request = getMockRequest()

      await get(request, toolkit)

      expect(addLanguageCodeToUri).toHaveBeenCalledWith(request, redirectUri)
    }
  )

  it('GetDataRedirect being thrown will use addLanguageCodeToUri to decorate the redirect target', async () => {
    journeyDefinition.push({ current: { page: 'view' }, backLink: '/previous/page' })
    const getData = () => {
      throw new GetDataRedirect('/go/somewhere/else')
    }
    const { get } = pageHandler(null, 'view', '/next/page', getData)
    const returnValue = Symbol('/previous/page')
    addLanguageCodeToUri.mockReturnValueOnce(returnValue)
    const toolkit = getMockToolkit()

    await get(getMockRequest(), toolkit)

    expect(toolkit.redirect).toHaveBeenCalledWith(returnValue)
  })

  it('error calls addLanguageCodeToUri with request', async () => {
    const { error } = pageHandler('', 'view')
    const request = getMockRequest()
    await error(request, getMockToolkit(), { details: [] })
    expect(addLanguageCodeToUri).toHaveBeenCalledWith(request)
  })

  it.each([['/route/one'], ['/route/sixty-six']])('error redirects to uri decorated by addLanguageCodeToUri', async url => {
    const { error } = pageHandler('', 'view')
    const toolkit = getMockToolkit()
    addLanguageCodeToUri.mockReturnValueOnce(`Redirect to url ${url}`)
    await error(getMockRequest(undefined, url), toolkit, { details: [] })
    expect(toolkit.redirect).toHaveBeenCalledWith(`Redirect to url ${url}`)
  })

  it('sets the value of pageData with displayAnalytics true', async () => {
    addLanguageCodeToUri.mockReturnValueOnce('/buy/process-analytics-preferences')
    const { get } = pageHandler('', 'view', '/next/page')
    const toolkit = getMockToolkit()
    await get(getMockRequest(), toolkit)
    expect(toolkit.view).toMatchSnapshot()
  })

  it('sets the value of pageData with displayAnalytics false', async () => {
    addLanguageCodeToUri.mockReturnValueOnce('/buy/process-analytics-preferences')
    const { get } = pageHandler('', 'view', '/next/page')
    const toolkit = getMockToolkit()
    await get(getMockRequest(null, '/we/are/here'), toolkit)
    expect(toolkit.view).toMatchSnapshot()
  })

  it.each([
    ['payment cancelled', PAYMENT_CANCELLED.uri],
    ['payment failed', PAYMENT_FAILED.uri],
    ['agreed', AGREED.uri],
    ['order complete', ORDER_COMPLETE.uri],
    ['licence details', LICENCE_DETAILS.uri]
  ])('hides the analytics banner for %s page', async (_pageLabel, pageUri) => {
    const { get } = pageHandler('', 'view', '/next/page')
    const toolkit = getMockToolkit()
    const mockRequest = getMockRequest(null, pageUri)
    await get(mockRequest, toolkit)
    const pageData = toolkit.view.mock.calls[0][1]
    expect(pageData.displayAnalytics).toBeFalsy()
  })

  it('sets analytics values to default values if analytics key is not set', async () => {
    const { get } = pageHandler('', 'view', '/next/page')
    const toolkit = getMockToolkit()
    const mockRequest = getMockRequest(null, '/current/page', false)
    await get(mockRequest, toolkit)
    const pageData = toolkit.view.mock.calls[0][1]
    expect(pageData).toEqual(
      expect.objectContaining({
        analyticsMessageDisplayed: false,
        analyticsSelected: false,
        acceptedTracking: false
      })
    )
  })

  it.each([[PAYMENT_CANCELLED.uri], [PAYMENT_FAILED.uri], [AGREED.uri], [ORDER_COMPLETE.uri], [LICENCE_DETAILS.uri]])(
    'sets journeyBeginning to false if not on licence_for or identify page',
    async pageUri => {
      const { get } = pageHandler('', 'view', '/next/page')
      const toolkit = getMockToolkit()
      const mockRequest = getMockRequest(null, pageUri)
      await get(mockRequest, toolkit)
      const pageData = toolkit.view.mock.calls[0][1]
      expect(pageData).toEqual(
        expect.objectContaining({
          journeyBeginning: false
        })
      )
    }
  )

  // it.only('sets journeyBeginning to true if on licence_for or identify page', async () => {
  //   const { get } = pageHandler('', 'view', '/next/page')
  //   const toolkit = getMockToolkit()
  //   const mockRequest = getMockRequest(null, IDENTIFY.uri)
  //   await get(mockRequest, toolkit)
  //   const pageData = toolkit.view.mock.calls[0][1]
  //   expect(pageData).toEqual(
  //     expect.objectContaining({
  //       journeyBeginning: true
  //     })
  //   )
  // })

  it.each([[IDENTIFY.uri], [LICENCE_FOR.uri]])('sets journeyBeginning to true if on licence_for or identify page', async pageUri => {
    const { get } = pageHandler('', 'view', '/next/page')
    const toolkit = getMockToolkit()
    const mockRequest = getMockRequest(null, pageUri)
    await get(mockRequest, toolkit)
    const pageData = toolkit.view.mock.calls[0][1]
    expect(pageData).toEqual(
      expect.objectContaining({
        journeyBeginning: true
      })
    )
  })
})

const getMockRequest = (setCurrentPermission = () => {}, path = '/buy/we/are/here', includeAnalytics = true) => ({
  cache: () => ({
    helpers: {
      page: {
        getCurrentPermission: () => ({}),
        setCurrentPermission
      },
      status: {
        getCurrentPermission: () => ({}),
        setCurrentPermission: () => {}
      },
      transaction: {
        getCurrentPermission: () => {}
      },
      analytics: {
        get: () =>
          // prettier-ignore
          includeAnalytics
            ? {
                [ANALYTICS.selected]: 'selected',
                [ANALYTICS.acceptTracking]: 'accepted-tracking',
                [ANALYTICS.seenMessage]: 'seen-message'
              }
            : undefined
      }
    }
  }),
  i18n: {
    getCatalog: () => {},
    getLocales: () => [],
    getLocale: () => ''
  },
  path,
  url: {
    search: ''
  }
})

const getMockToolkit = () => ({
  redirect: jest.fn(() => ({ takeover: () => {} })),
  view: jest.fn()
})
